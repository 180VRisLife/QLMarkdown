/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/sbarex/qlmarkdown */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// convertCodeToHTML converts the provided source code string to HTML. Classes for syntax
// highlighting are generated using Chroma.
extern char* convertCodeToHTML(char* source, char* lexer, char* theme);

// getCSSStyle converts the provided source code string to HTML. Classes for syntax
// highlighting are generated using Chroma.
// @param lexer
// @param theme Theme name
// @param background "ignore" skip the theme css code, a css color #ffffff overwrite the color set in the style.
extern char* getCSSStyle(char* lexer, char* theme, char* background);

// getStyles return the names of the available styles.
extern char* getStyles();
extern GoInt addStyle(char* name, char* settings);
extern GoUint8 containsEmoji(char* text);
extern char* replaceEmoji(char* text, GoUint8 use_characters);
extern char* getStyleInfo(char* name);
extern char* base64encoding(char* filename, char* basedir);

#ifdef __cplusplus
}
#endif
